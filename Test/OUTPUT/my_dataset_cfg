[{'text': ['\\\\?\\C:\\Users\\ninas\\OneDrive\\Documents\\UNI\\Productive-Bachelors\\DATA\\data2\\00\\wikihouse\\asset.py'], 'type': 'Module', 'id': 0, 'children': [1]}, {'text': ["Expr(value=Str(s=' Provides ``ManifestedStaticURLGenerator``, an implementation of\\n  :py:class:`~weblayer.interfaces.IStaticURLGenerator` that uses an `Assetgen`_\\n  manifest file to generate static urls for use in templates.\\n  \\n  _`Assetgen`: http://pypi.python.org/pypi/assetgen\\n  \\n'))", "Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Str(s='ManifestedStaticURLGenerator')], ctx=Load()))", "ImportFrom(module='itertools', names=[alias(name='cycle', asname=None)], level=0)", "ImportFrom(module='zope.component', names=[alias(name='adapts', asname=None)], level=0)", "ImportFrom(module='zope.interface', names=[alias(name='implements', asname=None)], level=0)", "ImportFrom(module='weblayer.interfaces', names=[alias(name='IRequest', asname=None), alias(name='ISettings', asname=None), alias(name='IStaticURLGenerator', asname=None)], level=0)", "ImportFrom(module='weblayer.settings', names=[alias(name='require_setting', asname=None)], level=0)", "Expr(value=Call(func=Name(id='require_setting', ctx=Load()), args=[Str(s='static_url_prefix')], keywords=[keyword(arg='default', value=Str(s=u'/static/'))], starargs=None, kwargs=None))", "Expr(value=Call(func=Name(id='require_setting', ctx=Load()), args=[Str(s='assetgen_manifest')], keywords=[], starargs=None, kwargs=None))"], 'type': 'Expr', 'id': 1, 'children': [2]}, {'text': ['ManifestedStaticURLGenerator'], 'type': 'ClassDef', 'id': 2, 'children': [3]}, {'text': ["Expr(value=Str(s=' Adapter to generate static URLs using an `Assetgen`_ manifest file.\\n      \\n      _`Assetgen`: http://pypi.python.org/pypi/assetgen\\n      \\n    '))", "Expr(value=Call(func=Name(id='adapts', ctx=Load()), args=[Name(id='IRequest', ctx=Load()), Name(id='ISettings', ctx=Load())], keywords=[], starargs=None, kwargs=None))", "Expr(value=Call(func=Name(id='implements', ctx=Load()), args=[Name(id='IStaticURLGenerator', ctx=Load())], keywords=[], starargs=None, kwargs=None))"], 'type': 'Expr', 'id': 3, 'children': [4]}, {'text': ['__init__'], 'type': 'FunctionDef', 'id': 4, 'children': [5]}, {'text': ["Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dev', ctx=Store())], value=Call(func=Attribute(value=Name(id='settings', ctx=Load()), attr='get', ctx=Load()), args=[Str(s='dev'), Name(id='False', ctx=Load())], keywords=[], starargs=None, kwargs=None))", "Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_host', ctx=Store())], value=Call(func=Attribute(value=Name(id='settings', ctx=Load()), attr='get', ctx=Load()), args=[Str(s='static_host'), Attribute(value=Name(id='request', ctx=Load()), attr='host', ctx=Load())], keywords=[], starargs=None, kwargs=None))", "Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_static_url_prefix', ctx=Store())], value=Subscript(value=Name(id='settings', ctx=Load()), slice=Index(value=Str(s='static_url_prefix')), ctx=Load()))", "Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_manifest', ctx=Store())], value=Subscript(value=Name(id='settings', ctx=Load()), slice=Index(value=Str(s='assetgen_manifest')), ctx=Load()))", "Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_subdomains', ctx=Store())], value=Call(func=Name(id='cycle', ctx=Load()), args=[Call(func=Attribute(value=Name(id='settings', ctx=Load()), attr='get', ctx=Load()), args=[Str(s='static_subdomains'), Str(s='12345')], keywords=[], starargs=None, kwargs=None)], keywords=[], starargs=None, kwargs=None))"], 'type': 'Assign', 'id': 5, 'children': [6]}, {'text': ['get_url'], 'type': 'FunctionDef', 'id': 6, 'children': [7]}, {'text': ['Expr(value=Str(s=" Get a fully expanded url for the given static resource ``path``.\\n          \\n          If we\'re in production then appends a subdomain to the beginning\\n          of the host, to avoid too many connections to the same url.\\n        "))', "Assign(targets=[Name(id='file_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_manifest', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='path', ctx=Load())], keywords=[], starargs=None, kwargs=None))"], 'type': 'Expr', 'id': 7, 'children': [8]}, {'text': ["Name(id='True', ctx=Load())"], 'type': 'If', 'id': 8, 'children': [9, 11]}, {'text': ["Assign(targets=[Name(id='host', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_host', ctx=Load()))"], 'type': 'True_Case', 'id': 9, 'children': [10]}, {'text': ["Return(value=BinOp(left=Str(s=u'//%s%s%s'), op=Mod(), right=Tuple(elts=[Name(id='host', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_static_url_prefix', ctx=Load()), Name(id='file_path', ctx=Load())], ctx=Load())))"], 'type': None, 'id': 10, 'children': []}, {'text': ["Assign(targets=[Name(id='host', ctx=Store())], value=BinOp(left=Str(s='%s.%s'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_subdomains', ctx=Load()), attr='next', ctx=Load()), args=[], keywords=[], starargs=None, kwargs=None), Attribute(value=Name(id='self', ctx=Load()), attr='_host', ctx=Load())], ctx=Load())))"], 'type': 'False_case', 'id': 11, 'children': [10]}]
[{'text': ['\\\\?\\C:\\Users\\ninas\\OneDrive\\Documents\\UNI\\Productive-Bachelors\\DATA\\data2\\00\\wikihouse\\auth.py'], 'type': 'Module', 'id': 0, 'children': [1]}, {'text': ["Expr(value=Str(s=' Provides `@auth.required` and `@auth.admin` decorators, using\\n  `google.appengine.api.users`.\\n'))", "ImportFrom(module='google.appengine.api', names=[alias(name='users', asname=None)], level=0)"], 'type': 'Expr', 'id': 1, 'children': [2]}, {'text': ['required'], 'type': 'FunctionDef', 'id': 2, 'children': [3]}, {'text': ["Expr(value=Str(s=' Decorator to require that a user be logged in to access a handler.\\n    '))"], 'type': 'Expr', 'id': 3, 'children': [4]}, {'text': ['check_login'], 'type': 'FunctionDef', 'id': 4, 'children': [5]}, {'text': ["Assign(targets=[Name(id='user', ctx=Store())], value=Call(func=Attribute(value=Name(id='users', ctx=Load()), attr='get_current_user', ctx=Load()), args=[], keywords=[], starargs=None, kwargs=None))"], 'type': 'Assign', 'id': 5, 'children': [6]}, {'text': ["Compare(left=Name(id='user', ctx=Load()), ops=[Is()], comparators=[Name(id='None', ctx=Load())])"], 'type': 'If', 'id': 6, 'children': [7, 8]}, {'text': ["Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='redirect', ctx=Load()), args=[Call(func=Attribute(value=Name(id='users', ctx=Load()), attr='create_login_url', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load()), attr='path', ctx=Load())], keywords=[], starargs=None, kwargs=None)], keywords=[], starargs=None, kwargs=None))"], 'type': 'True_Case', 'id': 7, 'children': []}, {'text': ["Return(value=Call(func=Name(id='handler_method', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[], starargs=Name(id='args', ctx=Load()), kwargs=Name(id='kwargs', ctx=Load())))"], 'type': None, 'id': 8, 'children': []}]
[{'text': ['\\\\?\\C:\\Users\\ninas\\OneDrive\\Documents\\UNI\\Productive-Bachelors\\DATA\\data2\\00\\wikihouse\\bootstrap.py'], 'type': 'Module', 'id': 0, 'children': [1]}, {'text': ["Expr(value=Str(s=' Bootstrap the application.\\n'))", "Import(names=[alias(name='logging', asname=None)])", "Import(names=[alias(name='yaml', asname=None)])", "ImportFrom(module='weblayer', names=[alias(name='RequestHandler', asname=None)], level=0)", "Import(names=[alias(name='model', asname=None)])"], 'type': 'Expr', 'id': 1, 'children': [2]}, {'text': ['Bootstrap'], 'type': 'ClassDef', 'id': 2, 'children': [3]}, {'text': ["Expr(value=Str(s=' Delete all existing `model.Series` and `model.Quote` instances and create\\n      new instances corresponding to `series.yaml` and `quotes.yaml`.\\n    '))"], 'type': 'Expr', 'id': 3, 'children': [4]}, {'text': ['bootstrap_series'], 'type': 'FunctionDef', 'id': 4, 'children': [5]}, {'text': ["Assign(targets=[Name(id='existing', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='Series', ctx=Load()), attr='all', ctx=Load()), args=[], keywords=[], starargs=None, kwargs=None), attr='fetch', ctx=Load()), args=[Num(n=300)], keywords=[], starargs=None, kwargs=None))", "Assign(targets=[Name(id='number_removed', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='existing', ctx=Load())], keywords=[], starargs=None, kwargs=None))", "Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='db', ctx=Load()), attr='delete', ctx=Load()), args=[Name(id='existing', ctx=Load())], keywords=[], starargs=None, kwargs=None))", "Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Str(s='series.yaml'), Str(s='r')], keywords=[], starargs=None, kwargs=None))", "Assign(targets=[Name(id='series', ctx=Store())], value=Call(func=Attribute(value=Name(id='yaml', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[], starargs=None, kwargs=None))", "Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[], starargs=None, kwargs=None))", "Assign(targets=[Name(id='to_add', ctx=Store())], value=List(elts=[], ctx=Load()))", "Assign(targets=[Name(id='i', ctx=Store())], value=Num(n=0))"], 'type': 'Assign', 'id': 5, 'children': [6]}, {'text': ["Name(id='item', ctx=Store())", "Name(id='series', ctx=Load())"], 'type': None, 'id': 6, 'children': [8, 9]}, {'text': ["Assign(targets=[Name(id='number_added', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='to_add', ctx=Load())], keywords=[], starargs=None, kwargs=None))", "Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='db', ctx=Load()), attr='put', ctx=Load()), args=[Name(id='to_add', ctx=Load())], keywords=[], starargs=None, kwargs=None))"], 'type': 'Assign', 'id': 8, 'children': [10]}, {'text': ["Return(value=BinOp(left=Str(s='Deleted %s and created %s `model.Series` instances.'), op=Mod(), right=Tuple(elts=[Name(id='number_removed', ctx=Load()), Name(id='number_added', ctx=Load())], ctx=Load())))"], 'type': 'Return', 'id': 10, 'children': []}, {'text': ["Assign(targets=[Name(id='kwargs', ctx=Store())], value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[], starargs=None, kwargs=None))", "Assign(targets=[Name(id='key_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Str(s='value')], keywords=[], starargs=None, kwargs=None))", "Assign(targets=[Name(id='instance', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='Series', ctx=Load()), args=[], keywords=[keyword(arg='key_name', value=Name(id='key_name', ctx=Load())), keyword(arg='order', value=Name(id='i', ctx=Load()))], starargs=None, kwargs=Name(id='kwargs', ctx=Load())))", "Expr(value=Call(func=Attribute(value=Name(id='to_add', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[], starargs=None, kwargs=None))", "Assign(targets=[Name(id='i', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Num(n=1)))"], 'type': 'Assign', 'id': 9, 'children': [6]}]
[{'text': ['\\\\?\\C:\\Users\\ninas\\OneDrive\\Documents\\UNI\\Productive-Bachelors\\DATA\\data2\\00\\wikihouse\\config.py'], 'type': 'Module', 'id': 0, 'children': [1]}, {'text': ["Expr(value=Str(s=' Application settings.\\n'))", "Import(names=[alias(name='os', asname=None)])", "ImportFrom(module='os.path', names=[alias(name='dirname', asname=None), alias(name='join', asname='join_path')], level=0)", "ImportFrom(module='secret', names=[alias(name='email', asname=None), alias(name='cookie', asname='cookie_secret')], level=0)"], 'type': 'Expr', 'id': 1, 'children': [2]}, {'text': ["TryExcept(body=[ImportFrom(module='weblayer.utils', names=[alias(name='json_decode', asname=None)], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), name=None, body=[ImportFrom(module='json', names=[alias(name='loads', asname='json_decode')], level=0)])], orelse=[])"], 'type': 'TryExcept', 'id': 2, 'children': [4, 6]}, {'text': ["ImportFrom(module='weblayer.utils', names=[alias(name='json_decode', asname=None)], level=0)"], 'type': 'ImportFrom', 'id': 4, 'children': [3]}, {'text': ["Compare(left=Name(id='directory', ctx=Load()), ops=[Is()], comparators=[Name(id='None', ctx=Load())])"], 'type': None, 'id': 3, 'children': [8, 9]}, {'text': ["Assign(targets=[Name(id='directory', ctx=Store())], value=Call(func=Name(id='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[], starargs=None, kwargs=None))"], 'type': 'True_Case', 'id': 8, 'children': [9]}, {'text': ["Assign(targets=[Name(id='file_path', ctx=Store())], value=Call(func=Name(id='join_path', ctx=Load()), args=[Name(id='directory', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[], starargs=None, kwargs=None))"], 'type': 'Assign', 'id': 9, 'children': [10]}, {'text': ["TryExcept(body=[Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load())], keywords=[], starargs=None, kwargs=None))], handlers=[ExceptHandler(type=Name(id='IOError', ctx=Load()), name=None, body=[Assign(targets=[Name(id='data', ctx=Store())], value=Name(id='None', ctx=Load()))])], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='json_decode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[], starargs=None, kwargs=None)], keywords=[], starargs=None, kwargs=None)), Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[], starargs=None, kwargs=None))])"], 'type': 'TryExcept', 'id': 10, 'children': [12, 14]}, {'text': ["Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load())], keywords=[], starargs=None, kwargs=None))"], 'type': 'Assign', 'id': 12, 'children': [11]}, {'text': ["Return(value=Name(id='data', ctx=Load()))"], 'type': None, 'id': 11, 'children': []}, {'text': ["Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load())], keywords=[], starargs=None, kwargs=None))"], 'type': 'Assign', 'id': 14, 'children': [15]}, {'text': ["Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='json_decode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[], starargs=None, kwargs=None)], keywords=[], starargs=None, kwargs=None))", "Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[], starargs=None, kwargs=None))"], 'type': 'Assign', 'id': 15, 'children': [11]}, {'text': ["ImportFrom(module='weblayer.utils', names=[alias(name='json_decode', asname=None)], level=0)"], 'type': 'ImportFrom', 'id': 6, 'children': [3]}]
[{'text': ['\\\\?\\C:\\Users\\ninas\\OneDrive\\Documents\\UNI\\Productive-Bachelors\\DATA\\data2\\00\\wikihouse\\patch.py'], 'type': 'Module', 'id': 0, 'children': [1]}, {'text': ["Import(names=[alias(name='sys', asname=None)])", "ImportFrom(module='os.path', names=[alias(name='dirname', asname=None), alias(name='join', asname='join_path')], level=0)"], 'type': 'Import', 'id': 1, 'children': [2]}, {'text': ['sys_path'], 'type': 'FunctionDef', 'id': 2, 'children': [3]}, {'text': ["Expr(value=Str(s=' Add `./third_party` to `sys.path`.\\n    '))", "Assign(targets=[Name(id='third_party_dir', ctx=Store())], value=Call(func=Name(id='join_path', ctx=Load()), args=[Call(func=Name(id='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[], starargs=None, kwargs=None), Str(s='third_party')], keywords=[], starargs=None, kwargs=None))"], 'type': 'Expr', 'id': 3, 'children': [4]}, {'text': ["UnaryOp(op=Not(), operand=Compare(left=Name(id='third_party_dir', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load())]))"], 'type': 'If', 'id': 4, 'children': [5]}, {'text': ["Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), attr='insert', ctx=Load()), args=[Num(n=1), Name(id='third_party_dir', ctx=Load())], keywords=[], starargs=None, kwargs=None))"], 'type': 'True_Case', 'id': 5, 'children': []}]
[{'text': ['\\\\?\\C:\\Users\\ninas\\OneDrive\\Documents\\UNI\\Productive-Bachelors\\DATA\\data2\\00\\wikihouse\\template.py'], 'type': 'Module', 'id': 0, 'children': [1]}, {'text': ["ImportFrom(module='weblayer.template', names=[alias(name='MakoTemplateRenderer', asname=None)], level=0)"], 'type': 'ImportFrom', 'id': 1, 'children': [2]}, {'text': ['Renderer'], 'type': 'ClassDef', 'id': 2, 'children': [3]}, {'text': ['Expr(value=Str(s=" `Mako <http://www.makotemplates.org/>`_ template renderer that\\n      doesn\'t cache modules in a directory.\\n    "))'], 'type': 'Expr', 'id': 3, 'children': [4]}, {'text': ['__init__'], 'type': 'FunctionDef', 'id': 4, 'children': [5]}, {'text': ["Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='module_directory')), ctx=Store())], value=Name(id='None', ctx=Load()))", "Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='Renderer', ctx=Load()), Name(id='self', ctx=Load())], keywords=[], starargs=None, kwargs=None), attr='__init__', ctx=Load()), args=[], keywords=[], starargs=Name(id='args', ctx=Load()), kwargs=Name(id='kwargs', ctx=Load())))"], 'type': 'Assign', 'id': 5, 'children': []}]
[{'text': ['\\\\?\\C:\\Users\\ninas\\OneDrive\\Documents\\UNI\\Productive-Bachelors\\DATA\\data2\\00\\wikihouse\\urls.py'], 'type': 'Module', 'id': 0, 'children': [1]}, {'text': ["Expr(value=Str(s=' Provides ``mapping`` of url paths to request handlers.\\n'))", "ImportFrom(module='bootstrap', names=[alias(name='Bootstrap', asname=None)], level=0)", "ImportFrom(module='fund', names=[alias(name='InstantPaymentNotificationHandler', asname=None)], level=0)", "ImportFrom(module='fund', names=[alias(name='ThankYouHandler', asname=None)], level=0)", "ImportFrom(module='view', names=[alias(name='*', asname=None)], level=0)", "Assign(targets=[Name(id='mapping', ctx=Store())], value=List(elts=[Tuple(elts=[Str(s='/'), Name(id='Index', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/ipn'), Name(id='InstantPaymentNotificationHandler', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/thank-you'), Name(id='ThankYouHandler', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/about\\\\/?'), Name(id='About', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/guide\\\\/?'), Name(id='Guide', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/guide/download\\\\/?'), Name(id='Download', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/guide/standards\\\\/?'), Name(id='Standards', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/community\\\\/?'), Name(id='Community', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/news\\\\/?'), Name(id='News', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/support\\\\/?'), Name(id='Support', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/contact\\\\/?'), Name(id='Contact', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/press\\\\/?'), Name(id='Press', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/legal/terms'), Name(id='Terms', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/library\\\\/?'), Name(id='Library', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/library/sketchup\\\\/?'), Name(id='Library', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/library/series/(\\\\w+)\\\\/?'), Name(id='Library', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/library/users\\\\/?'), Name(id='Users', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/library/users/([0-9]+)\\\\/?'), Name(id='User', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/library/designs/([0-9]+)\\\\/?'), Name(id='Design', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/library/designs/([0-9]+)/(edit)\\\\/?'), Name(id='Design', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/library/designs\\\\/?'), Name(id='Design', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/library/designs/add\\\\/?'), Name(id='Design', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/library/designs/add/sketchup\\\\/?'), Name(id='Design', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/redirect/success/([0-9]+)\\\\/?'), Name(id='RedirectSuccess', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/redirect/error\\\\/?'), Name(id='RedirectError', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/redirect/after/delete\\\\/?'), Name(id='RedirectAfterDelete', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/admin/moderate\\\\/?'), Name(id='Moderate', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/admin/bootstrap\\\\/?'), Name(id='Bootstrap', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/activity'), Name(id='ActivityScreen', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/txns'), Name(id='TxnList', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/blob64/([^/]+)/([^/]+)\\\\/?'), Name(id='Base64Blob', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/blob64/([^/]+)\\\\/?'), Name(id='Base64Blob', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/i18n/message_strings.json'), Name(id='MessageStrings', ctx=Load())], ctx=Load()), Tuple(elts=[Str(s='/.*'), Name(id='NotFound', ctx=Load())], ctx=Load())], ctx=Load()))"], 'type': 'Expr', 'id': 1, 'children': []}]
[{'text': ['\\\\?\\C:\\Users\\ninas\\OneDrive\\Documents\\UNI\\Productive-Bachelors\\DATA\\data2\\00\\wikihouse\\utils.py'], 'type': 'Module', 'id': 0, 'children': [1]}, {'text': ["Expr(value=Str(s='Utility functions.'))", "Import(names=[alias(name='logging', asname=None)])", "ImportFrom(module='json', names=[alias(name='loads', asname='decode_json')], level=0)", "ImportFrom(module='google.appengine.api', names=[alias(name='memcache', asname=None)], level=0)", "ImportFrom(module='google.appengine.api.urlfetch', names=[alias(name='fetch', asname='urlfetch'), alias(name='POST', asname=None)], level=0)", "ImportFrom(module='google.appengine.ext', names=[alias(name='db', asname=None)], level=0)"], 'type': 'Expr', 'id': 1, 'children': [2]}, {'text': ['render_number_with_commas'], 'type': 'FunctionDef', 'id': 2, 'children': [3]}, {'text': ["Assign(targets=[Name(id='result', ctx=Store())], value=Str(s=''))"], 'type': 'Assign', 'id': 3, 'children': [4]}, {'text': ["Compare(left=Name(id='n', ctx=Load()), ops=[GtE()], comparators=[Num(n=1000)])"], 'type': None, 'id': 4, 'children': [6, 7]}, {'text': ["Return(value=BinOp(left=Str(s='%d%s'), op=Mod(), right=Tuple(elts=[Name(id='n', ctx=Load()), Name(id='result', ctx=Load())], ctx=Load())))"], 'type': None, 'id': 6, 'children': []}, {'text': ["Assign(targets=[Tuple(elts=[Name(id='n', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store())], value=Call(func=Name(id='divmod', ctx=Load()), args=[Name(id='n', ctx=Load()), Num(n=1000)], keywords=[], starargs=None, kwargs=None))", "Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=Str(s=',%03d%s'), op=Mod(), right=Tuple(elts=[Name(id='r', ctx=Load()), Name(id='result', ctx=Load())], ctx=Load())))"], 'type': 'Assign', 'id': 7, 'children': [4]}]
[{'text': ['\\\\?\\C:\\Users\\ninas\\OneDrive\\Documents\\UNI\\Productive-Bachelors\\DATA\\data2\\00\\wikihouse\\view.py'], 'type': 'Module', 'id': 0, 'children': [1]}, {'text': ["Expr(value=Str(s=' ``RequestHandler``s.\\n'))", "ImportFrom(module='__future__', names=[alias(name='with_statement', asname=None)], level=0)", "Import(names=[alias(name='base64', asname=None)])", "Import(names=[alias(name='cgi', asname=None)])", "Import(names=[alias(name='gettext', asname=None)])", "Import(names=[alias(name='logging', asname=None)])", "Import(names=[alias(name='quopri', asname=None)])", "Import(names=[alias(name='random', asname=None)])", "Import(names=[alias(name='re', asname=None)])", "Import(names=[alias(name='urllib', asname=None)])", "ImportFrom(module='pytz.gae', names=[alias(name='pytz', asname=None)], level=0)", "ImportFrom(module='xml.etree', names=[alias(name='ElementTree', asname='etree')], level=0)", "ImportFrom(module='google.appengine.api', names=[alias(name='files', asname=None), alias(name='images', asname=None), alias(name='mail', asname=None), alias(name='memcache', asname=None), alias(name='urlfetch', asname=None), alias(name='users', asname=None)], level=0)", "ImportFrom(module='google.appengine.api', names=[alias(name='datastore_errors', asname=None)], level=0)", "ImportFrom(module='google.appengine.ext', names=[alias(name='blobstore', asname=None), alias(name='db', asname=None)], level=0)", "ImportFrom(module='webob.exc', names=[alias(name='status_map', asname=None), alias(name='HTTPNotFound', asname=None), alias(name='HTTPForbidden', asname=None)], level=0)", "ImportFrom(module='weblayer', names=[alias(name='RequestHandler', asname='BaseRequestHandler')], level=0)", "ImportFrom(module='weblayer.utils', names=[alias(name='encode_to_utf8', asname=None), alias(name='unicode_urlencode', asname=None)], level=0)", "ImportFrom(module='weblayer.utils', names=[alias(name='json_decode', asname=None), alias(name='json_encode', asname=None), alias(name='xhtml_escape', asname=None)], level=0)", "Import(names=[alias(name='auth', asname=None)])", "Import(names=[alias(name='fund', asname=None)])", "Import(names=[alias(name='model', asname=None)])", 'Assign(targets=[Name(id=\'find_svg_viewbox\', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id=\'re\', ctx=Load()), attr=\'compile\', ctx=Load()), args=[Str(s=\'viewBox="([^"]*)\')], keywords=[], starargs=None, kwargs=None), attr=\'findall\', ctx=Load()))', 'Assign(targets=[Name(id=\'replace_svg_height\', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id=\'re\', ctx=Load()), attr=\'compile\', ctx=Load()), args=[Str(s=\'<svg height="[^"]*\')], keywords=[], starargs=None, kwargs=None), attr=\'sub\', ctx=Load()))', "Assign(targets=[Name(id='donate_form_data', ctx=Store())], value=Dict(keys=[Str(s='action_url'), Str(s='business_email'), Str(s='cancel_return_url'), Str(s='image_url'), Str(s='notify_url'), Str(s='return_url')], values=[Attribute(value=Name(id='fund', ctx=Load()), attr='ENDPOINT', ctx=Load()), Attribute(value=Name(id='fund', ctx=Load()), attr='PAYPAL_ACCOUNT', ctx=Load()), Attribute(value=Name(id='fund', ctx=Load()), attr='CANCEL_URL', ctx=Load()), Attribute(value=Name(id='fund', ctx=Load()), attr='PAYPAL_LOGO_IMAGE', ctx=Load()), Attribute(value=Name(id='fund', ctx=Load()), attr='NOTIFY_URL', ctx=Load()), Attribute(value=Name(id='fund', ctx=Load()), attr='THANK_YOU_URL', ctx=Load())]))"], 'type': 'Expr', 'id': 1, 'children': [2]}, {'text': ['is_empty_file'], 'type': 'FunctionDef', 'id': 2, 'children': [3]}, {'text': ["TryExcept(body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=None, upper=Num(n=200), step=None), ctx=Load()), attr='split', ctx=Load()), args=[Str(s='\\r\\n')], keywords=[], starargs=None, kwargs=None)), If(test=Compare(left=Subscript(value=Name(id='lines', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load()), ops=[Eq()], comparators=[Str(s='Content-Length: 0')]), body=[Return(value=Name(id='True', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name=None, body=[Pass()])], orelse=[])"], 'type': 'TryExcept', 'id': 3, 'children': [5, 11]}, {'text': ["Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=None, upper=Num(n=200), step=None), ctx=Load()), attr='split', ctx=Load()), args=[Str(s='\\r\\n')], keywords=[], starargs=None, kwargs=None))"], 'type': 'Assign', 'id': 5, 'children': [6]}, {'text': ["Compare(left=Subscript(value=Name(id='lines', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load()), ops=[Eq()], comparators=[Str(s='Content-Length: 0')])"], 'type': 'If', 'id': 6, 'children': [7, 4]}, {'text': ["Return(value=Name(id='True', ctx=Load()))"], 'type': 'True_Case', 'id': 7, 'children': []}, {'text': ["Return(value=Name(id='False', ctx=Load()))"], 'type': None, 'id': 4, 'children': []}, {'text': ["Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=None, upper=Num(n=200), step=None), ctx=Load()), attr='split', ctx=Load()), args=[Str(s='\\r\\n')], keywords=[], starargs=None, kwargs=None))"], 'type': 'Assign', 'id': 11, 'children': [12]}, {'text': ["Compare(left=Subscript(value=Name(id='lines', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load()), ops=[Eq()], comparators=[Str(s='Content-Length: 0')])"], 'type': 'If', 'id': 12, 'children': [13, 4]}, {'text': ["Return(value=Name(id='True', ctx=Load()))"], 'type': 'True_Case', 'id': 13, 'children': []}]
[{'text': ['\\\\?\\C:\\Users\\ninas\\OneDrive\\Documents\\UNI\\Productive-Bachelors\\DATA\\data2\\05bit\\django-smarter\\setup.py'], 'type': 'Module', 'id': 0, 'children': [1]}, {'text': ["Expr(value=Str(s='Setup file for easy installation'))", "ImportFrom(module='os.path', names=[alias(name='join', asname=None), alias(name='dirname', asname=None)], level=0)", "ImportFrom(module='setuptools', names=[alias(name='setup', asname=None)], level=0)", "Assign(targets=[Name(id='version', ctx=Store())], value=Str(s='1.1'))", "Assign(targets=[Name(id='LONG_DESCRIPTION', ctx=Store())], value=Str(s='\\nSmarter declarative style generic views for Django.\\n'))"], 'type': 'Expr', 'id': 1, 'children': [2]}, {'text': ['long_description'], 'type': 'FunctionDef', 'id': 2, 'children': [3]}, {'text': ['Expr(value=Str(s="Return long description from README.rst if it\'s present\\n    because it doesn\'t get installed."))'], 'type': 'Expr', 'id': 3, 'children': [4]}, {'text': ["TryExcept(body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Name(id='join', ctx=Load()), args=[Call(func=Name(id='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[], starargs=None, kwargs=None), Str(s='README.rst')], keywords=[], starargs=None, kwargs=None)], keywords=[], starargs=None, kwargs=None), attr='read', ctx=Load()), args=[], keywords=[], starargs=None, kwargs=None))], handlers=[ExceptHandler(type=Name(id='IOError', ctx=Load()), name=None, body=[Return(value=Name(id='LONG_DESCRIPTION', ctx=Load()))])], orelse=[])"], 'type': 'TryExcept', 'id': 4, 'children': [6, 9]}, {'text': ["Return(value=Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Name(id='join', ctx=Load()), args=[Call(func=Name(id='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[], starargs=None, kwargs=None), Str(s='README.rst')], keywords=[], starargs=None, kwargs=None)], keywords=[], starargs=None, kwargs=None), attr='read', ctx=Load()), args=[], keywords=[], starargs=None, kwargs=None))"], 'type': 'Return', 'id': 6, 'children': []}, {'text': ["Return(value=Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Name(id='join', ctx=Load()), args=[Call(func=Name(id='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[], starargs=None, kwargs=None), Str(s='README.rst')], keywords=[], starargs=None, kwargs=None)], keywords=[], starargs=None, kwargs=None), attr='read', ctx=Load()), args=[], keywords=[], starargs=None, kwargs=None))"], 'type': 'Return', 'id': 9, 'children': []}]
[{'text': ['\\\\?\\C:\\Users\\ninas\\OneDrive\\Documents\\UNI\\Productive-Bachelors\\DATA\\data2\\05bit\\django-smarter\\example\\example\\settings.py'], 'type': 'Module', 'id': 0, 'children': [1]}, {'text': ["Import(names=[alias(name='os.path', asname='path')])", "Assign(targets=[Name(id='PROJECT_ROOT', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[], starargs=None, kwargs=None)], keywords=[], starargs=None, kwargs=None))", "Assign(targets=[Name(id='DEBUG', ctx=Store())], value=Name(id='True', ctx=Load()))", "Assign(targets=[Name(id='TEMPLATE_DEBUG', ctx=Store())], value=Name(id='DEBUG', ctx=Load()))", "Assign(targets=[Name(id='ADMINS', ctx=Store())], value=Tuple(elts=[], ctx=Load()))", "Assign(targets=[Name(id='MANAGERS', ctx=Store())], value=Name(id='ADMINS', ctx=Load()))", "Assign(targets=[Name(id='DATABASES', ctx=Store())], value=Dict(keys=[Str(s='default')], values=[Dict(keys=[Str(s='ENGINE'), Str(s='NAME'), Str(s='USER'), Str(s='PASSWORD'), Str(s='HOST'), Str(s='PORT')], values=[Str(s='django.db.backends.sqlite3'), Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='PROJECT_ROOT', ctx=Load()), Str(s='example.db')], keywords=[], starargs=None, kwargs=None), Str(s=''), Str(s=''), Str(s=''), Str(s='')])]))", "Assign(targets=[Name(id='ALLOWED_HOSTS', ctx=Store())], value=List(elts=[], ctx=Load()))", "Assign(targets=[Name(id='TIME_ZONE', ctx=Store())], value=Str(s='America/Chicago'))", "Assign(targets=[Name(id='LANGUAGE_CODE', ctx=Store())], value=Str(s='en-us'))", "Assign(targets=[Name(id='SITE_ID', ctx=Store())], value=Num(n=1))", "Assign(targets=[Name(id='USE_I18N', ctx=Store())], value=Name(id='True', ctx=Load()))", "Assign(targets=[Name(id='USE_L10N', ctx=Store())], value=Name(id='True', ctx=Load()))", "Assign(targets=[Name(id='USE_TZ', ctx=Store())], value=Name(id='True', ctx=Load()))", "Assign(targets=[Name(id='MEDIA_ROOT', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='PROJECT_ROOT', ctx=Load()), Str(s='media')], keywords=[], starargs=None, kwargs=None))", "Assign(targets=[Name(id='MEDIA_URL', ctx=Store())], value=Str(s='/media/'))", "Assign(targets=[Name(id='STATIC_ROOT', ctx=Store())], value=Str(s=''))", "Assign(targets=[Name(id='STATIC_URL', ctx=Store())], value=Str(s='/static/'))", "Assign(targets=[Name(id='STATICFILES_DIRS', ctx=Store())], value=Tuple(elts=[], ctx=Load()))", "Assign(targets=[Name(id='STATICFILES_FINDERS', ctx=Store())], value=Tuple(elts=[Str(s='django.contrib.staticfiles.finders.FileSystemFinder'), Str(s='django.contrib.staticfiles.finders.AppDirectoriesFinder')], ctx=Load()))", "Assign(targets=[Name(id='SECRET_KEY', ctx=Store())], value=Str(s='x7t(^sg3a=^9lg7-k)1vv$_##*yyqm*3k3@%0)74r3qqvqz0)t'))", "Assign(targets=[Name(id='TEMPLATE_LOADERS', ctx=Store())], value=Tuple(elts=[Str(s='django.template.loaders.filesystem.Loader'), Str(s='django.template.loaders.app_directories.Loader')], ctx=Load()))", "Assign(targets=[Name(id='MIDDLEWARE_CLASSES', ctx=Store())], value=Tuple(elts=[Str(s='django.middleware.common.CommonMiddleware'), Str(s='django.contrib.sessions.middleware.SessionMiddleware'), Str(s='django.middleware.csrf.CsrfViewMiddleware'), Str(s='django.contrib.auth.middleware.AuthenticationMiddleware'), Str(s='django.contrib.messages.middleware.MessageMiddleware')], ctx=Load()))", "Assign(targets=[Name(id='ROOT_URLCONF', ctx=Store())], value=Str(s='example.urls'))", "Assign(targets=[Name(id='WSGI_APPLICATION', ctx=Store())], value=Str(s='example.wsgi.application'))", "Assign(targets=[Name(id='TEMPLATE_DIRS', ctx=Store())], value=Tuple(elts=[], ctx=Load()))", "Assign(targets=[Name(id='INSTALLED_APPS', ctx=Store())], value=Tuple(elts=[Str(s='django.contrib.auth'), Str(s='django.contrib.contenttypes'), Str(s='django.contrib.sessions'), Str(s='django.contrib.sites'), Str(s='django.contrib.messages'), Str(s='django.contrib.staticfiles'), Str(s='django.contrib.admin'), Str(s='smarter'), Str(s='pages')], ctx=Load()))", "Assign(targets=[Name(id='LOGGING', ctx=Store())], value=Dict(keys=[Str(s='version'), Str(s='disable_existing_loggers'), Str(s='filters'), Str(s='handlers'), Str(s='loggers')], values=[Num(n=1), Name(id='False', ctx=Load()), Dict(keys=[Str(s='require_debug_false')], values=[Dict(keys=[Str(s='()')], values=[Str(s='django.utils.log.RequireDebugFalse')])]), Dict(keys=[Str(s='mail_admins')], values=[Dict(keys=[Str(s='level'), Str(s='filters'), Str(s='class')], values=[Str(s='ERROR'), List(elts=[Str(s='require_debug_false')], ctx=Load()), Str(s='django.utils.log.AdminEmailHandler')])]), Dict(keys=[Str(s='django.request')], values=[Dict(keys=[Str(s='handlers'), Str(s='level'), Str(s='propagate')], values=[List(elts=[Str(s='mail_admins')], ctx=Load()), Str(s='ERROR'), Name(id='True', ctx=Load())])])]))"], 'type': 'Import', 'id': 1, 'children': []}]
