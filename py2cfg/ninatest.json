[{"id": 1, "text": "\"\"\" Provides ``ManifestedStaticURLGenerator``, an implementation of\n  :py:class:`~weblayer.interfaces.IStaticURLGenerator` that uses an `Assetgen`_\n  manifest file to generate static urls for use in templates.\n  \n  _`Assetgen`: http://pypi.python.org/pypi/assetgen\n  \n\"\"\"\n__all__ = ['ManifestedStaticURLGenerator']\nfrom itertools import cycle\nfrom zope.component import adapts\nfrom zope.interface import implements\nfrom weblayer.interfaces import IRequest, ISettings, IStaticURLGenerator\nfrom weblayer.settings import require_setting\nrequire_setting('static_url_prefix', default=u'/static/')\nrequire_setting('assetgen_manifest')\nclass ManifestedStaticURLGenerator(object):\n    \"\"\" Adapter to generate static URLs using an `Assetgen`_ manifest file.\n      \n      _`Assetgen`: http://pypi.python.org/pypi/assetgen\n      \n    \"\"\"\n    adapts(IRequest, ISettings)\n    implements(IStaticURLGenerator)\n\n    def __init__(self, request, settings):\n        self._dev = settings.get('dev', False)\n        self._host = settings.get('static_host', request.host)\n        self._static_url_prefix = settings['static_url_prefix']\n        self._manifest = settings['assetgen_manifest']\n        self._subdomains = cycle(settings.get('static_subdomains', '12345'))\n\n    def get_url(self, path):\n        \"\"\" Get a fully expanded url for the given static resource ``path``.\n          \n          If we're in production then appends a subdomain to the beginning\n          of the host, to avoid too many connections to the same url.\n        \"\"\"\n        file_path = self._manifest.get(path, path)\n        if True:\n            host = self._host\n        else:\n            host = '%s.%s' % (self._subdomains.next(), self._host)\n        return u'//%s%s%s' % (host, self._static_url_prefix, file_path)\n", "children": [], "type": "expression"}][{"id": 1, "text": "\"\"\" Provides `@auth.required` and `@auth.admin` decorators, using\n  `google.appengine.api.users`.\n\"\"\"\nfrom google.appengine.api import users\ndef required(handler_method):...\ndef admin(handler_method):...\n", "children": [], "type": "expression"}][{"id": 1, "text": "\"\"\" Bootstrap the application.\n\"\"\"\nimport logging\nimport yaml\nfrom weblayer import RequestHandler\nimport model\nclass Bootstrap(RequestHandler):\n    \"\"\" Delete all existing `model.Series` and `model.Quote` instances and create\n      new instances corresponding to `series.yaml` and `quotes.yaml`.\n    \"\"\"\n\n    def bootstrap_series(self):\n        existing = model.Series.all().fetch(300)\n        number_removed = len(existing)\n        model.db.delete(existing)\n        sock = open('series.yaml', 'r')\n        series = yaml.load(sock)\n        sock.close()\n        to_add = []\n        i = 0\n        for item in series:\n            kwargs = item.copy()\n            key_name = kwargs.pop('value')\n            instance = model.Series(key_name=key_name, order=i, **kwargs)\n            to_add.append(instance)\n            i = i + 1\n        number_added = len(to_add)\n        model.db.put(to_add)\n        return 'Deleted %s and created %s `model.Series` instances.' % (\n            number_removed, number_added)\n\n    def bootstrap_quotes(self):\n        existing = model.Quote.all().fetch(300)\n        number_removed = len(existing)\n        model.db.delete(existing)\n        sock = open('quotes.yaml', 'r')\n        series = yaml.load(sock)\n        sock.close()\n        to_add = []\n        for item in series:\n            kwargs = item.copy()\n            key_name = kwargs.pop('org')\n            instance = model.Quote(key_name=key_name, **kwargs)\n            to_add.append(instance)\n        number_added = len(to_add)\n        model.db.put(to_add)\n        return 'Deleted %s and created %s `model.Quote` instances.' % (\n            number_removed, number_added)\n\n    def get(self):\n        return '<br />%s' % self.bootstrap_quotes()\n", "children": [], "type": "expression"}][{"id": 1, "text": "\"\"\" Application settings.\n\"\"\"\nimport os\nfrom os.path import dirname, join as join_path\nfrom secret import email, cookie as cookie_secret\n", "children": [2], "type": "expression"}, {"id": 2, "text": "from weblayer.utils import json_decode\n", "children": [3], "type": "try"}, {"id": 3, "text": "def get_data(filename, directory=None):...\nsettings = {'dev': os.environ.get('SERVER_SOFTWARE', '').startswith('Dev'),\n    'check_xsrf': True, 'cookie_secret': cookie_secret,\n    'moderator_email_address': email, 'assetgen_manifest': get_data(\n    'assets.json'), 'static_files_path': 'static', 'static_url_prefix':\n    u'/static/', 'template_directories': ['templates'], 'locale_directory':\n    os.path.join('static', 'i18n'), 'js_message_strings': get_data(\n    'message_strings.json', os.path.join('static', 'i18n')),\n    'default_language': 'en', 'supported_languages': ['en']}\n", "children": [], "type": "function"}][{"id": 1, "text": "import sys\nfrom os.path import dirname, join as join_path\ndef sys_path():...\n", "children": [], "type": "import"}][{"id": 1, "text": "from weblayer.template import MakoTemplateRenderer\nclass Renderer(MakoTemplateRenderer):\n    \"\"\" `Mako <http://www.makotemplates.org/>`_ template renderer that\n      doesn't cache modules in a directory.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        kwargs['module_directory'] = None\n        super(Renderer, self).__init__(*args, **kwargs)\n", "children": [], "type": "importfrom"}][{"id": 1, "text": "\"\"\" Provides ``mapping`` of url paths to request handlers.\n\"\"\"\nfrom bootstrap import Bootstrap\nfrom fund import InstantPaymentNotificationHandler\nfrom fund import ThankYouHandler\nfrom view import *\nmapping = [('/', Index), ('/ipn', InstantPaymentNotificationHandler), (\n    '/thank-you', ThankYouHandler), ('/about\\\\/?', About), ('/guide\\\\/?',\n    Guide), ('/guide/download\\\\/?', Download), ('/guide/standards\\\\/?',\n    Standards), ('/community\\\\/?', Community), ('/news\\\\/?', News), (\n    '/support\\\\/?', Support), ('/contact\\\\/?', Contact), ('/press\\\\/?',\n    Press), ('/legal/terms', Terms), ('/library\\\\/?', Library), (\n    '/library/sketchup\\\\/?', Library), ('/library/series/(\\\\w+)\\\\/?',\n    Library), ('/library/users\\\\/?', Users), ('/library/users/([0-9]+)\\\\/?',\n    User), ('/library/designs/([0-9]+)\\\\/?', Design), (\n    '/library/designs/([0-9]+)/(edit)\\\\/?', Design), (\n    '/library/designs\\\\/?', Design), ('/library/designs/add\\\\/?', Design),\n    ('/library/designs/add/sketchup\\\\/?', Design), (\n    '/redirect/success/([0-9]+)\\\\/?', RedirectSuccess), (\n    '/redirect/error\\\\/?', RedirectError), ('/redirect/after/delete\\\\/?',\n    RedirectAfterDelete), ('/admin/moderate\\\\/?', Moderate), (\n    '/admin/bootstrap\\\\/?', Bootstrap), ('/activity', ActivityScreen), (\n    '/txns', TxnList), ('/blob64/([^/]+)/([^/]+)\\\\/?', Base64Blob), (\n    '/blob64/([^/]+)\\\\/?', Base64Blob), ('/i18n/message_strings.json',\n    MessageStrings), ('/.*', NotFound)]\n", "children": [], "type": "expression"}]